# -*- coding: utf-8 -*-
"""Untitled19.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14OAL_LapQoYihyU2FMyVJBDo6NGU7Zwh
"""

import numpy as np
import pandas as pd

data = pd.read_csv("/content/Churn_Modelling (1).csv")

data.head()

data.columns

data.tail()

data.shape

data.info()

data.isnull().sum()

data.describe(include='all')

data= data.drop(['RowNumber', 'CustomerId', 'Surname'],axis=1)

data.head()

data['Geography'].unique()

data = pd.get_dummies(data,drop_first=True)

data.head()

data.columns

data['Exited'].value_counts()

import seaborn as sns

sns.countplot(x='Exited', data=data)

X = data.drop(['Exited'], axis=1)
y = data['Exited']

from imblearn.over_sampling import SMOTE

X_res,y_res = SMOTE().fit_resample(X,y)

X_res.value_counts()
y_res.value_counts()

from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test = train_test_split(X_res,y_res,test_size=0.2, random_state=42)

from sklearn.preprocessing import StandardScaler

Sc = StandardScaler()

X_train = Sc.fit_transform(X_train)

X_test = Sc.transform(X_test)

X_train

from sklearn.linear_model import LogisticRegression

model = LogisticRegression()

model.fit(X_train,y_train)

y_pred = model.predict(X_test)

from sklearn.metrics import accuracy_score

accuracy_score(y_test,y_pred)

from sklearn.metrics import precision_score,recall_score,f1_score

from sklearn.metrics import precision_score,recall_score,f1_score

precision_score(y_test,y_pred)

recall_score(y_test,y_pred)

f1_score(y_test,y_pred)

from sklearn import svm

model2 = svm.SVC()

model2.fit(X_train,y_train)

y_pred2= model2.predict(X_test)

accuracy_score(y_test,y_pred2)

precision_score(y_test,y_pred2)

precision_score(y_test,y_pred2)

recall_score(y_test,y_pred2)

f1_score(y_test,y_pred2)

from sklearn.neighbors  import KNeighborsClassifier

model3 = KNeighborsClassifier()

model3.fit(X_train,y_train)

y_pred3 = model3.predict(X_test)

accuracy_score(y_test,y_pred3)

precision_score(y_test,y_pred3)

recall_score(y_test,y_pred3)

f1_score(y_test,y_pred3)

from sklearn.ensemble import RandomForestClassifier

model4 = RandomForestClassifier()

model4.fit(X_train,y_train)

y_pred4= model4.predict(X_test)

accuracy_score(y_test,y_pred4)

precision_score(y_test,y_pred4)

recall_score(y_test,y_pred4)

f1_score(y_test,y_pred4)

from sklearn.ensemble import GradientBoostingClassifier

model5 = GradientBoostingClassifier()

model5.fit(X_train,y_train)

y_pred5 = model5.predict(X_test)

accuracy_score(y_test,y_pred5)

precision_score(y_test,y_pred5)

recall_score(y_test,y_pred5)

f1_score(y_test,y_pred5)

final_data = pd.DataFrame({
    'Model':['LogisticRegression','Support Vector Classifier','K neigherest','Random Forest','Gradient Boosting'],
    'Acc' : [accuracy_score(y_test,y_pred),accuracy_score(y_test,y_pred2),accuracy_score(y_test,y_pred3),accuracy_score(y_test,y_pred4),accuracy_score(y_test,y_pred5)]
})

final_data